{"version":3,"sources":["Client.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["todoDefaults","currentTodos","todoQuery","gql","_templateObject","clearTodoQuery","_templateObject2","addTodoQuery","_templateObject3","cache","InMemoryCache","stateLink","withClientState","defaults","resolvers","Mutation","addTodo","_obj","_ref","_ref2","item","query","updatedTodos","readQuery","concat","writeQuery","data","clearTodo","_args","_ref3","Client","ApolloClient","link","ApolloLink","from","todoQueryHandler","props","_ref4","ownProps","_ref4$data$currentTod","Object","objectSpread","withTodo","compose","graphql","name","TodoList","withState","addTodoMutation","clearTodoMutation","todoText","setTodoText","react_default","a","createElement","map","todo","index","key","value","onChange","e","target","type","placeholder","onClick","variables","Header","className","App","App_Header","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","react_apollo_browser_umd","client","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"quBAYA,IAAMA,EAAe,CACpBC,aAAc,IAOTC,EAAYC,IAAHC,KAMTC,EAAiBF,IAAHG,KAMdC,EAAeJ,IAAHK,KAkCZC,EAAQ,IAAIC,IAGZC,EAAYC,YAAgB,CACjCH,QACAI,SAAUb,EACVc,UAAW,CACVC,SAAU,CACTC,QAhCa,SAACC,EAADC,EAAAC,GAA2B,IAAnBC,EAAmBF,EAAnBE,KAAQX,EAAWU,EAAXV,MACzBY,EAAQnB,EAKRoB,EAHiBb,EAAMc,UAAU,CAACF,UAAjCpB,aAG2BuB,OAAOJ,GAKzC,OAFAX,EAAMgB,WAAW,CAACJ,QAAOK,KAAM,CAACzB,aAAcqB,KAEvC,MAsBLK,UAnBe,SAACV,EAAMW,EAAPC,GAEjB,OAF2CA,EAAXpB,MAC1BgB,WAAW,CAACJ,MAAOnB,EAAWwB,KAAM1B,IACnC,UAuBF8B,EAAS,IAAIC,IAAa,CAC/BC,KAAMC,aAAWC,KAAK,CACrBvB,IAEDF,MAAOA,IAOF0B,EAAmB,CACxBC,MAAO,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,SAAFC,EAAAF,EAAYX,KAAOzB,oBAAnB,IAAAsC,EAAkC,GAAlCA,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GACHF,EADG,CAENrC,mBAIIyC,EAAWC,IAChBC,kBAAQ1C,EAAWiC,GACnBS,kBAAQrC,EAAc,CAACsC,KAAM,oBAC7BD,kBAAQvC,EAAgB,CAACwC,KAAM,uBCpEjBC,EALEH,IAChBD,EACAK,IAAU,WAAY,cAAe,IAFrBJ,CAvBI,SAAAzB,GAAA,IACbjB,EADaiB,EACbjB,aACA+C,EAFa9B,EAEb8B,gBACAC,EAHa/B,EAGb+B,kBACAC,EAJahC,EAIbgC,SACAC,EALajC,EAKbiC,YALa,OAOpBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,mBACCrD,EAAasD,IAAI,SAACC,EAAMC,GAAP,OAAiBL,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,GAAQD,KACrDJ,EAAAC,EAAAC,cAAA,SACCK,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAYU,EAAEC,OAAOH,QACtCI,KAAK,OACLC,YAAY,oCAEbZ,EAAAC,EAAAC,cAAA,SAAOS,KAAK,SAASJ,MAAM,MAAMM,QAAS,SAACJ,GAC1Cb,EAAgB,CAACkB,UAAW,CAAC9C,KAAM8B,KACnCC,EAAY,OAEbC,EAAAC,EAAAC,cAAA,SAAOS,KAAK,SAASJ,MAAM,YAAYM,QAAS,SAACJ,GAAD,OAAOZ,UCtBnDkB,SAAS,kBACXf,EAAAC,EAAAC,cAAA,UAAQc,UAAU,eAChBhB,EAAAC,EAAAC,cAAA,MAAIc,UAAU,aAAd,6BAUSC,EAPH,kBACRjB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OAAO1B,EAAAC,EAAAC,cAPH,kBACZF,EAAAC,EAAAC,cAACyB,EAAA,eAAD,CAAgBC,OAAQlD,GACvBsB,EAAAC,EAAAC,cAAC2B,EAAD,QAKc,MAAUC,SAASC,eAAe,SDkH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.01a40460.chunk.js","sourcesContent":["import {InMemoryCache} from 'apollo-cache-inmemory';\nimport {ApolloLink} from 'apollo-client-preset';\nimport {ApolloClient} from 'apollo-client';\nimport {withClientState} from 'apollo-link-state';\nimport gql from 'graphql-tag';\nimport {graphql} from 'react-apollo';\nimport compose from 'recompose/compose';\n\n/*\n  Defaults\n*/\n\nconst todoDefaults = {\n\tcurrentTodos: [],\n};\n\n/*\n  GraphQL\n*/\n\nconst todoQuery = gql`\n    query GetTodo {\n        currentTodos @client\n    }\n`;\n\nconst clearTodoQuery = gql`\n    mutation clearTodo {\n        clearTodo @client\n    }\n`;\n\nconst addTodoQuery = gql`\n    mutation addTodo($item: String) {\n        addTodo(item: $item) @client\n    }\n`;\n\n/*\n  Cache Mutations\n*/\n\nconst addTodo = (_obj, {item}, {cache}) => {\n\tconst query = todoQuery;\n\t// Read the todo's from the cache\n\tconst {currentTodos} = cache.readQuery({query});\n\t\n\t// Add the item to the current todos\n\tconst updatedTodos = currentTodos.concat(item);\n\t\n\t// Update the cached todos\n\tcache.writeQuery({query, data: {currentTodos: updatedTodos}});\n\t\n\treturn null;\n};\n\nconst clearTodo = (_obj, _args, {cache}) => {\n\tcache.writeQuery({query: todoQuery, data: todoDefaults});\n\treturn null;\n};\n\n/*\n  Store\n*/\n\n// Set up Cache\nconst cache = new InMemoryCache();\n\n// Set up Local State\nconst stateLink = withClientState({\n\tcache,\n\tdefaults: todoDefaults,\n\tresolvers: {\n\t\tMutation: {\n\t\t\taddTodo,\n\t\t\tclearTodo,\n\t\t},\n\t},\n});\n\n// Initialize the Apollo Client\nconst Client = new ApolloClient({\n\tlink: ApolloLink.from([\n\t\tstateLink,\n\t]),\n\tcache: cache,\n});\n\n/*\n  Helpers\n*/\n\nconst todoQueryHandler = {\n\tprops: ({ownProps, data: {currentTodos = []}}) => ({\n\t\t...ownProps,\n\t\tcurrentTodos,\n\t}),\n};\n\nconst withTodo = compose(\n\tgraphql(todoQuery, todoQueryHandler),\n\tgraphql(addTodoQuery, {name: 'addTodoMutation'}),\n\tgraphql(clearTodoQuery, {name: 'clearTodoMutation'}),\n);\n\nexport {\n\tClient,\n\twithTodo\n}","import React from 'react';\nimport compose from 'recompose/compose';\nimport withState from 'recompose/withState';\n\nimport {withTodo} from './Client'\n\nconst TodoListPure = ({\n\t\t\t\t\t\t  currentTodos,\n\t\t\t\t\t\t  addTodoMutation,\n\t\t\t\t\t\t  clearTodoMutation,\n\t\t\t\t\t\t  todoText,\n\t\t\t\t\t\t  setTodoText,\n\t\t\t\t\t  }) => (\n\t<div>\n\t\t<h1>Todos</h1>\n\t\t{currentTodos.map((todo, index) => <div key={index}>{todo}</div>)}\n\t\t<input\n\t\t\tvalue={todoText}\n\t\t\tonChange={(e) => setTodoText(e.target.value)}\n\t\t\ttype='text'\n\t\t\tplaceholder='Pick up milk, Grab, cheese, etc'\n\t\t/>\n\t\t<input type='submit' value='Add' onClick={(e) => {\n\t\t\taddTodoMutation({variables: {item: todoText}});\n\t\t\tsetTodoText(\"\")\n\t\t}}/>\n\t\t<input type='submit' value='Clear All' onClick={(e) => clearTodoMutation()}/>\n\t</div>);\n\nconst TodoList = compose(\n\twithTodo,\n\twithState('todoText', 'setTodoText', ''),\n)(TodoListPure);\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList'\nimport './App.css';\n\nconst Header = () => (\n    <header className=\"App-headers\">\n      <h1 className=\"App-title\">Apollo Link State Demo</h1>\n    </header>);\n\nconst App = () => (\n    <div className=\"App\">\n      <Header/>\n      <TodoList/>\n    </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo';\nimport { Client } from './Client';\n\nconst Root = () => (\n\t<ApolloProvider client={Client}>\n\t\t<App/>\n\t</ApolloProvider>\n);\n\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}